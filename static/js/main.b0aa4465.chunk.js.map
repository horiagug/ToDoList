{"version":3,"sources":["components/Button/index.tsx","components/TodoTable/index.tsx","components/TextInput/index.tsx","pages/dashboard/index.tsx","pages/about/index.tsx","routes/index.tsx","Theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","styled","button","theme","color1","ButtonComponent","onClick","children","otherProps","Table","section","Header","header","Cell","div","Row","Actions","Hr","hr","TodoTable","useState","items","setItems","value","setValue","buttonState","toggleButtonState","useEffect","localItems","JSON","parse","localStorage","getItem","length","every","index","Array","isArray","map","item","i","result","filter","arr","setItem","stringify","handleCompletedClick","id","label","onChange","e","preventDefault","val","target","includes","Field","Input","input","TextInput","error","type","placeholder","Section","Dashboard","About","Routes","path","exact","component","bodyBackground","primaryText","invertedText","color2","color3","color4","color5","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b0aa4465.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.button<ButtonComponentProps>`\n  padding: 5px 12px;\n  color: white;\n  font-size: 16px;\n  font-weight: 700;\n  background-color: ${({ theme }) => theme.color1};\n  border: 0px;\n  border-radius: 3px;\n  appearance: none;\n  cursor: pointer;\n  margin-left: 12px;\n  margin-right: 12px;\n\n  \n  :focus:not(:focus-visible) {\n    outline: none;\n  }\n`;\n\nexport type ButtonComponentProps = {\n  children?: HTMLCollection | string;\n  onClick: (e?: React.MouseEvent) => void;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst ButtonComponent = ({ onClick, children, ...otherProps }: ButtonComponentProps) => {\n  return (\n    <Button onClick={onClick} {...otherProps}>{children}</Button>\n  );\n}\n\nexport default ButtonComponent;","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components';\nimport { TextInput } from './../../components';\nimport ButtonComponent from '../Button';\n\n\nconst Table = styled.section`\n    margin-left: auto;\n    margin-right: auto;\n    padding: 32px;\n`;\n\nconst Header = styled.header`\n    display: flex;\n    justify-content: space-around;\n`;\n\nconst Cell = styled.div`\n    display: table-cell\n`;\n\nconst Row = styled.div`\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 1px dotted black;\n`;\n\nconst Actions = styled.div`\n    display: flex;\n    justify-content: start;\n`\n    ;\n\nconst Hr = styled.hr`\n    height: 12px;\n    border: 0;\n    box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 0.5);\n`;\n\nexport default function TodoTable() {\n\n    const [items, setItems] = useState<string[]>([])\n    const [value, setValue] = useState('')\n    const [buttonState, toggleButtonState] = useState(false)\n\n    useEffect(() => {\n        const localItems = JSON.parse(localStorage.getItem('items') || '{}')\n        if (!(items.length === localItems.length && items.every((value, index) => value === localItems[index])) //Check if there's something to grab from local storage\n        ) {\n            setItems(localItems)\n        }\n    }, [items])\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e && e.preventDefault()\n        const val = e.target.value\n        setValue(val)\n    }\n\n    const handleButtonClick = () => {\n        if (value !== \"\" && !items.includes(value)) {\n            toggleButtonState(!buttonState)\n            const result: string[] = [...items, value]\n            localStorage.setItem('items', JSON.stringify(result))\n            setItems(result)\n            setValue(\"\")\n        }\n    }\n\n    const handleCompletedClick = (item: string) => {\n        const result: string[] = items.filter((value, index, arr) => { return value !== item })\n        localStorage.setItem('items', JSON.stringify(result))\n        setItems(result)\n    }\n\n    return (\n        <Table>\n            <Header>\n                <Cell>Task</Cell>\n                <Cell>Completed</Cell>\n            </Header>\n\n            <Hr />\n\n            {\n                Array.isArray(items) && items.length ? items.map((item, i) => {\n                    return (\n                        <Row>\n                            <Cell>{item}</Cell>\n                            <ButtonComponent onClick={() => handleCompletedClick(item)}> Finished </ButtonComponent>\n                        </Row>\n                    )\n                }) : null\n            }\n\n            <Hr />\n\n            <Actions>\n                <TextInput\n                    id=\"add-stuff\"\n                    value={value}\n                    label=\"Add another TO-DO item here\"\n                    onChange={onChange}\n                />\n                <ButtonComponent onClick={handleButtonClick}> Add </ButtonComponent>\n            </Actions>\n        </Table>\n    )\n}","import React, { FunctionComponent } from 'react'\nimport styled from 'styled-components'\n\n\ntype TextInputProps = {\n    id: string,\n    value: string,\n    error?: string,\n    label?: string,\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n}\n\nconst Field = styled.div`\n    margin: 15,\n    height: 40,\n    borderColor: '#7a42f4',\n    borderWidth: 1\n`;\n\nconst Input = styled.input`\n    color: #555;\n    width: 100%;\n    box-sizing: border-box;\n    letter-spacing: 1px;\n    outline:none;\n`;\n\n\nconst TextInput: FunctionComponent<TextInputProps> = ({ id, value, error, label, onChange }) =>\n    (\n\n        <Field>\n            <Input\n                id={id}\n                type=\"text\"\n                value={value}\n                placeholder={label}\n                onChange={onChange}\n            />\n        </Field>\n    )\n\n\nexport default TextInput","import React from 'react'\nimport { TodoTable } from './../../components'\nimport styled from 'styled-components'\n\nconst Section = styled.div`\n    width:auto;\n    margin-left: -16px;\n    margin-right: -16px;\n    position: relative;\n    background-color: white;\n    margin-top: 32px;\n    padding-top: 24px;\n    padding-bottom: 24px;\n    padding-left: 24px;\n    padding-right: 24px;\n    text-align: center\n\n`;\n\n\nexport default function Dashboard() {\n    return (\n        <Section>\n            <h1>\n                To do list page\n            </h1>\n            <TodoTable />\n        </Section>\n    )\n}","import React from 'react'\n\nexport default function About() {\n    return (\n        <h1>\n            Welcome to the about page page\n        </h1>\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {\n  About,\n  Dashboard\n} from './../pages'\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Dashboard} />\n      <Route path=\"/about\" exact component={About} />\n    </Switch>\n  )\n}\n","// Define what props.theme will look like\nconst theme = {\n    bodyBackground: '#f9fafa',\n    primaryText: '#0a0a0a',\n    invertedText: 'white',\n    color1: 'rgba(214, 160, 0, 1)',\n    color2: 'rgba(239, 182, 155, 1)',\n    color3: 'rgba(204, 136, 114, 1)',\n    color4: 'rgba(137, 42, 61, 1)',\n    color5: 'rgba(71, 49, 68, 1)',\n  };\n  \n  export default theme;","import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components'\n\nimport { HashRouter } from 'react-router-dom'\n\nimport Routes from './routes'\n\nimport theme from './Theme'\n\nconst Main = styled.div`\n  margin: 0;\n  font-family: 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: ${({ theme }) => theme.bodyBackground};\n  height: 100vh;\n  overflow-y: scroll;\n  padding: 0 15px;\n  *:focus:not([data-focus-visible-added]) {\n    outline: none;\n  }\n`;\n\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Main>\n        <HashRouter>\n          <Routes />\n        </HashRouter>\n      </Main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}